generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patient {
  id               Int         @id @default(autoincrement())
  name             String
  disease          String
  allergies        String?
  roomNumber       Int
  email            String?
 

  age              Int
  gender           String?
  contactInfo      String?
 
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  foodCharts       FoodChart[]
}

model FoodChart {
  id           Int           @id @default(autoincrement())
  patientId    Int
  patient      Patient        @relation(fields: [patientId], references: [id])
  morningMeal  String
  eveningMeal  String
  nightMeal    String
  instructions String?
  ingredients  String?
  createdAt    DateTime       @default(now())

  delivery     Delivery?
  mealPreparations MealPreparation[]
  mealDeliveries   MealDelivery[]
}

model Delivery {
  id           Int           @id @default(autoincrement())
  foodChartId  Int           @unique
  foodChart    FoodChart     @relation(fields: [foodChartId], references: [id])
  deliveryTime DateTime
  status       String
  notes        String?
  createdAt    DateTime       @default(now())
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      String   // manager, pantry, or delivery
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pantry {
  id          Int          @id @default(autoincrement())
  staffName   String
  name String?
  contactInfo String
  location    String
  createdAt   DateTime     @default(now())
  tasks       PantryTask[]
}

model PantryTask {
  id           Int        @id @default(autoincrement())
  pantryStaffId Int
  pantryStaff  Pantry      @relation(fields: [pantryStaffId], references: [id])
  task         String
  status       String      @default("pending") // e.g., "pending", "in-progress", "completed"
  createdAt    DateTime    @default(now())
}

model MealPreparation {
  id           Int         @id @default(autoincrement())
  foodChartId  Int
  foodChart    FoodChart   @relation(fields: [foodChartId], references: [id])
  status       String      @default("pending") // e.g., "pending", "in-progress", "completed"
  notes        String?
  createdAt    DateTime    @default(now())
}

model MealDelivery {
  id           Int         @id @default(autoincrement())
  foodChartId  Int
  foodChart    FoodChart   @relation(fields: [foodChartId], references: [id])
  status       String      @default("pending") // e.g., "pending", "in-progress", "completed"
  notes        String?
  createdAt    DateTime    @default(now())
}
